--
-- DB 네이밍 룰-------------------------------------------------------------------------------------------------------------------------------
        -- TB_USERS 테이블 제외 모든 테이블명은 단수형 처리(끝에 S를 안 붙인다는 뜻임)
-- 테이블 명은 앞에 항상 TB_를 붙임--
-- 시퀀스 명은 앞에 항상 SQ_를 붙임
-- 트리거 명은 앞에 항상 TR_를 붙임
-- 뷰 명은 앞에 항상 VW_를 붙임
-- 테이블명, 컬럼명은 두 단어 이상의 조합일 때, _로 구분 (예: TB_USER_FACE)
-- 제약조건명 안 적는걸로 통일
-- Y, N 값 컬럼의 타입 CHAR(1)로 통일
-- 0, 1, 2 상태값(예: 0=대기중, 1=활성, 2=비활성) 컬럼의 타입 NUMBER(3)으로 통일

-- 테이블 중복 방지 차 제거 처리-----------------------------------------------------------------------------------------------------------
        -- 강태석
DROP TABLE TB_USERS CASCADE CONSTRAINTS;
DROP TABLE TB_LOGIN_TOKEN CASCADE CONSTRAINTS;
DROP TABLE TB_ARCHIVED_USER CASCADE CONSTRAINTS;
DROP TABLE TB_USER_INTEREST CASCADE CONSTRAINTS;
DROP TABLE TB_ATTENDANCE CASCADE CONSTRAINTS;

-- 김채림
DROP TABLE TB_UPPER_CATEGORY CASCADE CONSTRAINTS;
DROP TABLE TB_SUB_CATEGORY CASCADE CONSTRAINTS;
DROP TABLE TB_TECH_STACK CASCADE CONSTRAINTS;
DROP TABLE TB_LECTURE_PACKAGE CASCADE CONSTRAINTS;
DROP TABLE TB_PACKAGE_SUB_CATEGORY CASCADE CONSTRAINTS;
DROP TABLE TB_PACKAGE_TECH_STACK CASCADE CONSTRAINTS;
DROP TABLE TB_MY_CERTIFICATE CASCADE CONSTRAINTS;
DROP TABLE TB_RATING CASCADE CONSTRAINTS;
--DROP TABLE TB_WATCH_HISTORY CASCADE CONSTRAINTS;
DROP TABLE TB_RECOMMEND_PERSON CASCADE CONSTRAINTS;
DROP TABLE TB_EDUCATION CASCADE CONSTRAINTS;
DROP TABLE TB_CAREER CASCADE CONSTRAINTS;
DROP TABLE TB_REPORT CASCADE CONSTRAINTS;

-- 이경민
DROP TABLE TB_LECTURE CASCADE CONSTRAINTS;
DROP TABLE TB_LECTURE_READ CASCADE CONSTRAINTS;
DROP TABLE TB_LECTURE_COMMENT CASCADE CONSTRAINTS;
DROP TABLE TB_NOTIFICATION CASCADE CONSTRAINTS;
DROP TABLE TB_QNA_QUESTION CASCADE CONSTRAINTS;
DROP TABLE TB_QNA_ANSWER CASCADE CONSTRAINTS;

-- 허강
DROP TABLE TB_ANNOUNCEMENT CASCADE CONSTRAINTS;
DROP TABLE TB_CHATROOM CASCADE CONSTRAINTS;
DROP TABLE TB_CHATUSER CASCADE CONSTRAINTS;
DROP TABLE TB_CHATMESSAGE CASCADE CONSTRAINTS;
DROP TABLE TB_MESSAGEREAD CASCADE CONSTRAINTS;
DROP TABLE TB_MESSAGEFILE CASCADE CONSTRAINTS;

-- 김도하
DROP TABLE TB_POST_VIEW CASCADE CONSTRAINTS;
DROP TABLE TB_LIKE CASCADE CONSTRAINTS;
DROP TABLE TB_FILE CASCADE CONSTRAINTS;
DROP TABLE TB_COMMENT CASCADE CONSTRAINTS;
DROP TABLE TB_POST CASCADE CONSTRAINTS;
DROP TABLE TB_COUPON CASCADE CONSTRAINTS;
DROP TABLE TB_TRANSACTION_HISTORY CASCADE CONSTRAINTS;

--이건우
DROP TABLE TB_IT_NEWS_BOARD CASCADE CONSTRAINTS;
DROP TABLE TB_IT_NEWS_SITE CASCADE CONSTRAINTS;


-- 시퀀스 중복 방지 차 제거 처리----------------------------------------------------------------------------------------------------------------
        -- 이경민
DROP SEQUENCE SQ_LECTURE_ID;
DROP SEQUENCE SQ_COMMENT_ID;
DROP SEQUENCE SQ_NOTIFICATION_ID;
DROP SEQUENCE SQ_QNA_QUESTION_ID;
DROP SEQUENCE SQ_QNA_ANSWER_ID;

-- 김채림
DROP SEQUENCE SQ_UPPER_CATEGORY_ID;
DROP SEQUENCE SQ_SUB_CATEGORY_ID;
DROP SEQUENCE SQ_TECH_STACK_ID;
DROP SEQUENCE SQ_LECTURE_PACKAGE_ID;
DROP SEQUENCE SQ_RECOMMEND_PERSON_ID;
DROP SEQUENCE SQ_LECTURE_PACKAGE_SUB_CATEGORY_ID;
DROP SEQUENCE SQ_MY_CERTIFICATE_NUMBER;
DROP SEQUENCE SQ_RATING_ID;
DROP SEQUENCE SQ_WATCH_ID;

-- 허강
DROP SEQUENCE SQ_ANNOUNCEMENT_ID;
DROP SEQUENCE SQ_ROOM_ID;
DROP SEQUENCE SQ_MESSAGE_ID;
DROP SEQUENCE SQ_FILE_ID;

-- 김도하
-- 게시물 ID 시퀀스
DROP SEQUENCE SQ_POST_ID;
-- 게시물 댓글 ID 시퀀스
DROP SEQUENCE SQ_POST_COMMENT_ID;
-- 게시물 파일 ID 시퀀스
DROP SEQUENCE SQ_POST_FILE_ID;
-- 게시물 좋아요 ID 시퀀스
DROP SEQUENCE SQ_LIKE_ID;
-- 결제 쿠폰 ID 시퀀스
DROP SEQUENCE SQ_COUPON_ID;
-- 거래 ID 시퀀스
DROP SEQUENCE SQ_TRANSACTION_ID;


-- 모든 트리거 중복 방지 차 제거 처리----------------------------------------------------------------------------------------------------------------
DECLARE
CURSOR c_triggers IS
SELECT trigger_name
FROM user_triggers;

v_trigger_name VARCHAR2(100);
BEGIN
FOR r_trigger IN c_triggers LOOP
v_trigger_name := r_trigger.trigger_name;
EXECUTE IMMEDIATE 'DROP TRIGGER ' || v_trigger_name;
END LOOP;
END;
/

-- 뷰 중복 방지 차 제거 처리----------------------------------------------------------------------------------------------------------------
-- 이경민
DROP VIEW LECTURE_COMMENT_VIEW;

-- 스케줄러 제거 처리 ----------------------------------------------------------------------------------
BEGIN
    DBMS_SCHEDULER.drop_job(job_name => 'DELETE_EXPIRED_SUBSCRIPTIONS');
END;
/

-- 테이블 생성 -------------------------------------------------------------------------------------------------------------------------------------
-- 강태석
-- 사용자 테이블(일반+소셜 사용자)
CREATE TABLE TB_USERS (
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL, -- INTELLICLASS, NAVER, KAKAO, GOOGLE
USER_NAME VARCHAR2(30) NOT NULL,
USER_PWD VARCHAR2(80), -- 소셜 로그인 사용자는 비밀번호가 필요없기에 NULL 가능, 비밀번호 암호화해서 저장할거라 길이를 길게 해놓음
PHONE VARCHAR2(20) UNIQUE, -- 휴대폰 번호는 겹칠일이 없음
NICKNAME VARCHAR2(50) UNIQUE, -- 닉네임 중복 불가
REGISTER_TIME DATE DEFAULT SYSDATE NOT NULL,
PROFILE_IMAGE_URL VARCHAR2(200) NOT NULL,
USER_TYPE NUMBER(3) DEFAULT 0 NOT NULL,
REPORT_COUNT NUMBER DEFAULT 0 NOT NULL,
LOGIN_OK CHAR(1) DEFAULT 'N' CHECK (LOGIN_OK IN ('Y', 'N')) NOT NULL,
FACE_LOGIN_YN CHAR(1) DEFAULT 'N' CHECK (FACE_LOGIN_YN IN ('Y', 'N')) NOT NULL,
PRIMARY KEY (USEREMAIL, PROVIDER) -- 복합키 사용, 이메일만 PK로 하기에는 일반, 소셜 이메일이 겹칠수 있음
);
COMMENT ON COLUMN TB_USERS.USEREMAIL IS '이메일';
COMMENT ON COLUMN TB_USERS.PROVIDER IS '제공자(INTELLICLASS, NAVER, KAKAO, GOOGLE)';
COMMENT ON COLUMN TB_USERS.USER_NAME IS '이름';
COMMENT ON COLUMN TB_USERS.USER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_USERS.PHONE IS '휴대폰 번호';
COMMENT ON COLUMN TB_USERS.NICKNAME IS '닉네임';
COMMENT ON COLUMN TB_USERS.REGISTER_TIME IS '가입일시';
COMMENT ON COLUMN TB_USERS.PROFILE_IMAGE_URL IS '프로필사진(저장위치)';
COMMENT ON COLUMN TB_USERS.USER_TYPE IS  '사용자 종류(0:학생, 1:강사, 2:관리자)';
COMMENT ON COLUMN TB_USERS.REPORT_COUNT IS '신고당한 횟수';
COMMENT ON COLUMN TB_USERS.LOGIN_OK IS '로그인 제한여부(여러번 신고당하면 로그인 차단)';
COMMENT ON COLUMN TB_USERS.FACE_LOGIN_YN IS '얼굴 등록 여부';

        -- 로그인 토큰 테이블
CREATE TABLE TB_LOGIN_TOKEN (
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
ACCESS_TOKEN_VALUE VARCHAR2(255) UNIQUE,
ACCESS_TOKEN_CREATED_TIME DATE DEFAULT SYSDATE,
ACCESS_TOKEN_EXPIRATION_TIME DATE,
REFRESH_TOKEN_VALUE VARCHAR2(255) UNIQUE,
REFRESH_TOKEN_CREATED_TIME DATE DEFAULT SYSDATE,
REFRESH_TOKEN_EXPIRATION_TIME DATE,
PRIMARY KEY (USEREMAIL, PROVIDER), -- 복합키 설정
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );
COMMENT ON COLUMN TB_LOGIN_TOKEN.USEREMAIL IS '이메일';
COMMENT ON COLUMN TB_LOGIN_TOKEN.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_LOGIN_TOKEN.ACCESS_TOKEN_VALUE IS 'ACCESS 토큰 고유값';
COMMENT ON COLUMN TB_LOGIN_TOKEN.ACCESS_TOKEN_CREATED_TIME IS 'ACCESS 토큰 생성 시간';
COMMENT ON COLUMN TB_LOGIN_TOKEN.ACCESS_TOKEN_EXPIRATION_TIME IS 'ACCESS 토큰 만료 시간';
COMMENT ON COLUMN TB_LOGIN_TOKEN.REFRESH_TOKEN_VALUE IS 'REFRESH 토큰 고유값';
COMMENT ON COLUMN TB_LOGIN_TOKEN.REFRESH_TOKEN_CREATED_TIME IS 'REFRESH 토큰 생성 시간';
COMMENT ON COLUMN TB_LOGIN_TOKEN.REFRESH_TOKEN_EXPIRATION_TIME IS 'REFRESH 토큰 만료 시간';

        -- 탈퇴 사용자 테이블 (회원탈퇴시 TB_USERS에서 이 테이블로 탈퇴회원의 정보를 옮김)
CREATE TABLE TB_ARCHIVED_USER (
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
USER_NAME VARCHAR2(255) NOT NULL,
ARCHIVED_TIME TIMESTAMP DEFAULT SYSDATE NOT NULL,
ARCHIVED_REASON VARCHAR2(255) NOT NULL,
PRIMARY KEY (USEREMAIL, PROVIDER) -- 복합키 설정
);
COMMENT ON COLUMN TB_ARCHIVED_USER.USEREMAIL IS '이메일';
COMMENT ON COLUMN TB_ARCHIVED_USER.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_ARCHIVED_USER.USER_NAME IS '이름';
COMMENT ON COLUMN TB_ARCHIVED_USER.ARCHIVED_TIME IS '탈퇴일시';
COMMENT ON COLUMN TB_ARCHIVED_USER.ARCHIVED_REASON IS '탈퇴 이유';

        -- 출석체크 테이블
CREATE TABLE TB_ATTENDANCE (
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
ATTENDANCE_TIME DATE DEFAULT SYSDATE NOT NULL,
PRIMARY KEY (USEREMAIL, PROVIDER, ATTENDANCE_TIME), -- 복합키 설정
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );
COMMENT ON COLUMN TB_ATTENDANCE.USEREMAIL IS '이메일';
COMMENT ON COLUMN TB_ATTENDANCE.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_ATTENDANCE.ATTENDANCE_TIME IS '출석체크 일시';


-- 김채림

-- 학력 테이블
CREATE TABLE TB_EDUCATION (
	EDUCATION_ID NUMBER PRIMARY KEY,
	NICKNAME  VARCHAR2(50)  NOT NULL ,
	EDUCATION_LEVEL VARCHAR2(50) NOT NULL,
	SCHOOL_NAME VARCHAR2(100) NOT NULL,
	MAJOR VARCHAR2(100) NOT NULL,
	EDUCATION_STATUS VARCHAR2(50) NOT NULL,
	ENTRY_DATE DATE NOT NULL,
	GRADUATION_DATE DATE NOT NULL,
	FOREIGN KEY (NICKNAME) REFERENCES TB_USERS(NICKNAME)
);

COMMENT ON TABLE TB_EDUCATION IS '학력';
COMMENT ON COLUMN TB_EDUCATION.EDUCATION_ID IS '학력 ID';
COMMENT ON COLUMN TB_EDUCATION.NICKNAME IS '닉네임';
COMMENT ON COLUMN TB_EDUCATION.EDUCATION_LEVEL IS '고등학교, 대학교 등 학교 수준';
COMMENT ON COLUMN TB_EDUCATION.SCHOOL_NAME IS '학교명';
COMMENT ON COLUMN TB_EDUCATION.MAJOR IS '학과';
COMMENT ON COLUMN TB_EDUCATION.EDUCATION_STATUS IS '졸업 여부(졸업, 재학중, 휴학중, 수료, 중퇴, 자퇴)';
COMMENT ON COLUMN TB_EDUCATION.ENTRY_DATE IS '입학년월';
COMMENT ON COLUMN TB_EDUCATION.GRADUATION_DATE IS '졸업년월';


-- 경력 테이블
CREATE TABLE TB_CAREER (
	CAREER_ID NUMBER PRIMARY KEY,
	NICKNAME  VARCHAR2(50)  NOT NULL ,
	INSTITUTION_NAME VARCHAR2(100) NOT NULL,
	POSITION VARCHAR2(100) NOT NULL,
	START_TIME DATE NOT NULL,
	END_TIME DATE,
	RESPONSIBILITIES VARCHAR2(500),
	FOREIGN KEY (NICKNAME) REFERENCES TB_USERS(NICKNAME)
);

COMMENT ON TABLE TB_CAREER IS '경력';
COMMENT ON COLUMN TB_CAREER.CAREER_ID IS '경력 ID';
COMMENT ON COLUMN TB_CAREER.NICKNAME IS '닉네임';
COMMENT ON COLUMN TB_CAREER.INSTITUTION_NAME IS '기관명';
COMMENT ON COLUMN TB_CAREER.POSITION IS '직위/역할';
COMMENT ON COLUMN TB_CAREER.START_TIME IS '근무 시작 년월';
COMMENT ON COLUMN TB_CAREER.END_TIME IS '근무 종료 년월';
COMMENT ON COLUMN TB_CAREER.RESPONSIBILITIES IS '주요 업무';



-- 자격증관리 테이블
CREATE TABLE TB_MY_CERTIFICATE(
    MY_CERTIFICATE_NUMBER   VARCHAR2(50) PRIMARY KEY,
	NICKNAME  VARCHAR2(50)  NOT NULL ,
	PDF_FILE   VARCHAR2(255) NOT NULL,
	KIND   VARCHAR2(30)  NOT NULL,
	PASSDATE   DATE  NOT NULL,
	ISSUE_PLACE   VARCHAR2(30)  NOT NULL,

	FOREIGN KEY (NICKNAME) REFERENCES TB_USERS(NICKNAME)
);

COMMENT ON TABLE TB_MY_CERTIFICATE IS '자격증관리';
COMMENT ON COLUMN TB_MY_CERTIFICATE.MY_CERTIFICATE_NUMBER IS '자격번호';
COMMENT ON COLUMN TB_MY_CERTIFICATE.NICKNAME IS '유저닉네임';
COMMENT ON COLUMN TB_MY_CERTIFICATE.PDF_FILE IS '경로';
COMMENT ON COLUMN TB_MY_CERTIFICATE.KIND IS '종목';
COMMENT ON COLUMN TB_MY_CERTIFICATE.PASSDATE IS '합격일자';
COMMENT ON COLUMN TB_MY_CERTIFICATE.ISSUE_PLACE IS '발행처';


-- 상위카테고리 테이블
CREATE TABLE TB_UPPER_CATEGORY(
	UPPER_CATEGORY_ID NUMBER PRIMARY KEY,
	UPPER_CATEGORY_NAME VARCHAR2(30)  NOT NULL
);

COMMENT ON TABLE TB_UPPER_CATEGORY IS '상위카테고리';
COMMENT ON COLUMN TB_UPPER_CATEGORY.UPPER_CATEGORY_ID IS '상위카테고리Id';
COMMENT ON COLUMN TB_UPPER_CATEGORY.UPPER_CATEGORY_NAME IS '상위카테고리명';



--하위카테고리 테이블
CREATE TABLE TB_SUB_CATEGORY(
	SUB_CATEGORY_ID  NUMBER PRIMARY KEY,
	SUB_CATEGORY_NAME  VARCHAR2(30)  NOT NULL,
	UPPER_CATEGORY_ID NUMBER NOT NULL,

	FOREIGN KEY (UPPER_CATEGORY_ID)REFERENCES TB_UPPER_CATEGORY (UPPER_CATEGORY_ID)
);

COMMENT ON TABLE TB_SUB_CATEGORY IS '하위카테고리';
COMMENT ON COLUMN TB_SUB_CATEGORY.SUB_CATEGORY_ID IS '하위카테고리ID';
COMMENT ON COLUMN TB_SUB_CATEGORY.SUB_CATEGORY_NAME IS '하위카테고리명';
COMMENT ON COLUMN TB_SUB_CATEGORY.UPPER_CATEGORY_ID IS '상위카테고리ID';




-- 사용자별 관심분야 테이블
CREATE TABLE TB_USER_INTEREST (
    NICKNAME  VARCHAR2(50)  NOT NULL ,
	SUB_CATEGORY_ID  NUMBER  NOT NULL,
	LECTURE_PACKAGE_ID  NUMBER  NOT NULL,


	PRIMARY KEY (NICKNAME, SUB_CATEGORY_ID, LECTURE_PACKAGE_ID ), -- 3개의 컬럼으로 복합키
	FOREIGN KEY (NICKNAME) REFERENCES TB_USERS(NICKNAME),
	FOREIGN KEY (SUB_CATEGORY_ID) REFERENCES TB_SUB_CATEGORY(SUB_CATEGORY_ID)
	FOREIGN KEY (LECTURE_PACKAGE_ID) REFERENCES TB_LECTURE_PACKAGE(LECTURE_PACKAGE_ID)
);

COMMENT ON COLUMN TB_USER_INTEREST.NICKNAME IS '이메일';
COMMENT ON COLUMN TB_USER_INTEREST.SUB_CATEGORY_ID IS '제공자';
COMMENT ON COLUMN TB_USER_INTEREST.LECTURE_PACKAGE_ID IS '하위카테고리ID';



--기술스택 테이블
CREATE TABLE TB_TECH_STACK(
	TECH_STACK_ID  NUMBER PRIMARY KEY,
	TECH_STACK_PATH  VARCHAR2(255) NOT NULL,
	TECH_STACK_NAME  VARCHAR2(100) NOT NULL
);

COMMENT ON TABLE TB_TECH_STACK IS '기술스택';
COMMENT ON COLUMN TB_TECH_STACK.TECH_STACK_ID IS '기술스택Id';
COMMENT ON COLUMN TB_TECH_STACK.TECH_STACK_PATH IS '이미지저장경로';
COMMENT ON COLUMN TB_TECH_STACK.TECH_STACK_NAME IS '기술스택명';



--패키지 테이블
CREATE TABLE TB_LECTURE_PACKAGE(
	LECTURE_PACKAGE_ID  NUMBER PRIMARY KEY,
	NICKNAME VARCHAR2(50) UNIQUE,
	TITLE  VARCHAR2(50)  NOT NULL,
	CLASS_GOAL   VARCHAR2(100) NOT NULL,
	RECOMMEND_PERSON  VARCHAR2(100)  NOT NULL,
	PRICE_KIND   NUMBER(3) NOT NULL CHECK (LECTURE_PACKAGE_kind_price IN ('0', '1')),
	PRICE  INT   NOT NULL,
	THUMBNAIL    VARCHAR2(255)  NOT NULL,
	BACKGROUND_COLOR  VARCHAR2(30) NOT NULL,
	REGISTER_DATE   DATE    NOT NULL,
	VIEW_COUNT     NUMBER    DEFAULT 0,

	FOREIGN KEY (NICKNAME) REFERENCES TB_USERS(NICKNAME)
);

COMMENT ON TABLE TB_LECTURE_PACKAGE IS '패키지';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.LECTURE_PACKAGE_ID IS '강의패키지Id';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.NICKNAME IS '작성자 닉네임';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.TITLE IS '강의패키지제목';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.CLASS_GOAL IS '강의패키지목표';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.RECOMMEND_PERSON IS '수강추천대상';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.LECTURE_PACKAGE_KIND_PRICE IS '패키지결제기간종류'; -- (0: 월정액, 1: 평생소장)
COMMENT ON COLUMN TB_LECTURE_PACKAGE.LECTURE_PACKAGE_PRICE IS '패키지가격';
COMMENT ON COLUMN TB_LECTURE_PACKAGE.THUMBNAIL IS '강의패키지 썸네일';  --이미지경로 저장
COMMENT ON COLUMN TB_LECTURE_PACKAGE.LECTURE_PACKAGE_REGISTER IS '등록일자';  --이미지경로 저장
COMMENT ON COLUMN TB_LECTURE_PACKAGE.LECTURE_PACKAGE_VIEWCOUNT IS '조회수';


--강의패키지마다의 하위카테고리 테이블
CREATE TB_PACKAGE_SUB_CATEGORY(
	LECTURE_PACKAGE_ID NUMBER,
	SUB_CATEGORY_ID NUMBER,

	PRIMARY KEY (LECTURE_PACKAGE_ID, SUB_CATEGORY_ID), --복합키
	FOREIGN KEY (LECTURE_PACKAGE_ID)REFERENCES TB_LECTURE_PACKAGE (LECTURE_PACKAGE_ID),
	FOREIGN KEY (SUB_CATEGORY_ID)REFERENCES TB_SUB_CATEGORY (SUB_CATEGORY_ID)
);

COMMENT ON TABLE TB_PACKAGE_SUB_CATEGORY IS '강의패키지 하위카테고리';
COMMENT ON COLUMN TB_PACKAGE_SUB_CATEGORY.LECTURE_PACKAGE_ID IS '강의패키지ID';
COMMENT ON COLUMN TB_PACKAGE_SUB_CATEGORY.SUB_CATEGORY_ID IS '하위카테고리ID';


-- 강의패키지마다의 기술스택 테이블
CREATE TABLE TB_PACKAGE_TECH_STACK(
	LECTURE_PACKAGE_ID   NUMBER ,
	TECH_STACK_ID  NUMBER,

	PRIMARY KEY (LECTURE_PACKAGE_ID, TECH_STACK_ID),
	FOREIGN KEY (LECTURE_PACKAGE_ID)REFERENCES TB_LECTURE_PACKAGE (LECTURE_PACKAGE_ID),
	FOREIGN KEY (TECH_STACK_ID)REFERENCES TB_TECH_STACK (TECH_STACK_ID)
);

COMMENT ON TABLE TB_PACKAGE_TECH_STACK IS '강의패키지 기술스택';
COMMENT ON COLUMN TB_PACKAGE_TECH_STACK.LECTURE_PACKAGE_ID IS '강의패키지ID';
COMMENT ON COLUMN TB_PACKAGE_TECH_STACK.TECH_STACK_Id IS '기술스택ID';


-- 강의 테이블
CREATE TABLE TB_LECTURE (
	LECTURE_ID NUMBER PRIMARY KEY,
	LECTURE_NAME VARCHAR2(255) NOT NULL,
	LECTURE_CONTENT VARCHAR2(1000) NOT NULL,
	LECTURE_THUMBNAIL VARCHAR2(255),
	LECTURE_VIDEO BLOB NOT NULL,
	LECTURE_DATE DATE DEFAULT SYSDATE,
	LECTURE_PACKAGE_ID NUMBER NOT NULL,
	USEREMAIL VARCHAR2(50) NOT NULL,
	PROVIDER VARCHAR2(20) NOT NULL,
	LECTURE_VIEWCOUNT NUMBER DEFAULT 0,

	FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
	FOREIGN KEY (LECTURE_PACKAGE_ID) REFERENCES TB_LECTURE_PACKAGE(LECTURE_PACKAGE_ID)
);

COMMENT ON TABLE TB_LECTURE IS '강의';
COMMENT ON COLUMN TB_LECTURE.LECTURE_ID IS '강의 ID';
COMMENT ON COLUMN TB_LECTURE.LECTURE_NAME IS '강의 이름';
COMMENT ON COLUMN TB_LECTURE.LECTURE_CONTENT IS '강의 설명';
COMMENT ON COLUMN TB_LECTURE.LECTURE_THUMBNAIL IS '강의 썸네일';
COMMENT ON COLUMN TB_LECTURE.LECTURE_VIDEO IS '강의 영상';
COMMENT ON COLUMN TB_LECTURE.LECTURE_DATE IS '강의 업로드 날짜';
COMMENT ON COLUMN TB_LECTURE.LECTURE_PACKAGE_ID IS '강의 패키지 ID';
COMMENT ON COLUMN TB_LECTURE.USEREMAIL IS '유저 이메일';
COMMENT ON COLUMN TB_LECTURE.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_LECTURE.LECTURE_VIEWCOUNT IS '강의 조회수';


-- 별점 테이블
CREATE TABLE TB_RATING (
	RATING_ID  NUMBER PRIMARY KEY,
	USEREMAIL VARCHAR2(50) NOT NULL,
	PROVIDER VARCHAR2(20) NOT NULL,
	LECTURE_PACKAGE_ID NUMBER NOT NULL,
	RATING FLOAT CHECK (rating BETWEEN 1 AND 5),


	FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
	FOREIGN KEY (LECTURE_PACKAGE_ID) REFERENCES TB_LECTURE_PACKAGE(LECTURE_PACKAGE_ID)
);

COMMENT ON TABLE TB_RATING IS '별점';
COMMENT ON COLUMN TB_RATING.RATING_ID IS '평점ID';
COMMENT ON COLUMN TB_RATING.USEREMAIL IS '유저이메일';
COMMENT ON COLUMN TB_RATING.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_RATING.LECTURE_PACKAGE_ID IS '패키지 ID';
COMMENT ON COLUMN TB_RATING.RATING IS '평가점수';





--신고테이블
CREATE TABLE TB_REPORT (
	REPORT_ID   NUMBER  PRIMARY KEY,
	RECEIVE_NICKNAME    VARCHAR2(50)   NOT NULL,
	DO_NICKNAME    VARCHAR2(50)   NOT NULL,
	CONTENT     VARCHAR2(500)    NOT NULL,
	REPORT_DATE     DATE  DEFAULT SYSDATE  NOT NULL,
	REPORT_TYPE      NUMBER    NOT NULL,
	CONTENT_ID      NUMBER     NOT NULL,

	FOREIGN KEY (RECEIVE_NICKNAME) REFERENCES TB_USERS(NICKNAME),
	FOREIGN KEY ( DO_NICKNAME) REFERENCES TB_USERS(NICKNAME)
);

COMMENT ON TABLE TB_REPORT IS '신고의 고유식별자';
COMMENT ON COLUMN TB_REPORT.REPORT_ID IS '신고의 고유식별자';
COMMENT ON COLUMN TB_REPORT.RECEIVE_NICKNAME IS '신고당한 사용자의 닉네임';
COMMENT ON COLUMN TB_REPORT.DO_NICKNAME IS '신고한 사용자의 닉네임';
COMMENT ON COLUMN TB_REPORT.CONTENT IS '신고내용';
COMMENT ON COLUMN TB_REPORT.REPORT_DATE  IS '신고날짜';
COMMENT ON COLUMN TB_REPORT.REPORT_TYPE IS '종류(0: 공유게시물 1: 댓글 2: 채팅)';
COMMENT ON COLUMN TB_REPORT.CONTENT_ID IS '신고된 ID';





        -- 이경민  -----------------------------------------------------------------------------------------------------------------------------
        -- 강의 읽음
CREATE TABLE TB_LECTURE_READ (
        LECTURE_ID NUMBER NOT NULL,
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
LECTURE_PACKAGE_ID NUMBER NOT NULL,
LECTURE_READ CHAR(1) DEFAULT 'N' CHECK (LECTURE_READ IN ('Y', 'N')),
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
FOREIGN KEY (LECTURE_ID) REFERENCES TB_LECTURE(LECTURE_ID),
FOREIGN KEY (LECTURE_PACKAGE_ID) REFERENCES TB_LECTURE_PACKAGE(LECTURE_PACKAGE_ID)
        );
COMMENT ON TABLE TB_LECTURE_READ IS '강의 읽음';
COMMENT ON COLUMN TB_LECTURE_READ.LECTURE_ID IS '강의 ID';
COMMENT ON COLUMN TB_LECTURE_READ.USEREMAIL IS '유저 이메일';
COMMENT ON COLUMN TB_LECTURE_READ.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_LECTURE_READ.LECTURE_PACKAGE_ID IS '강의 패키지 ID';
COMMENT ON COLUMN TB_LECTURE_READ.LECTURE_READ IS '보기 처리';

        -- 강의 댓글
CREATE TABLE TB_LECTURE_COMMENT (
        LECTURE_ID NUMBER NOT NULL,
        LECTURE_COMMENT_ID NUMBER PRIMARY KEY,
        LECTURE_COMMENT_REPLY CHAR(1) ,
LECTURE_COMMENT_CONTENT VARCHAR2(255),
LECTURE_COMMENT_DATE DATE DEFAULT SYSDATE,
USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
PARENT_COMMENT_ID NUMBER,
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
FOREIGN KEY (LECTURE_ID) REFERENCES TB_LECTURE(LECTURE_ID)
        );
COMMENT ON TABLE TB_LECTURE_COMMENT IS '강의 댓글';
COMMENT ON COLUMN TB_LECTURE_COMMENT.LECTURE_ID IS '강의 ID';
COMMENT ON COLUMN TB_LECTURE_COMMENT.LECTURE_COMMENT_ID IS '댓글 ID';
COMMENT ON COLUMN TB_LECTURE_COMMENT.LECTURE_COMMENT_REPLY IS '대댓글 순서';
COMMENT ON COLUMN TB_LECTURE_COMMENT.LECTURE_COMMENT_CONTENT IS '댓글 내용';
COMMENT ON COLUMN TB_LECTURE_COMMENT.LECTURE_COMMENT_DATE IS '댓글 날짜';
COMMENT ON COLUMN TB_LECTURE_COMMENT.USEREMAIL IS '유저 이메일';
COMMENT ON COLUMN TB_LECTURE_COMMENT.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_LECTURE_COMMENT.PARENT_COMMENT_ID IS '부모 댓글의 댓글 ID';

        -- 알림
CREATE TABLE TB_NOTIFICATION (
        NOTIFICATION_ID NUMBER PRIMARY KEY,
        USEREMAIL VARCHAR2(50),
PROVIDER VARCHAR2(20) NOT NULL,
OTHER_USEREMAIL VARCHAR2(50),
OTHER_PROVIDER VARCHAR2(20) NOT NULL,
TYPE NUMBER(4) NOT NULL,
NOTIFICATION_CONTENT VARCHAR2(255) NOT NULL,
NOTIFICATION_DATE DATE DEFAULT SYSDATE,
NOTIFICATION_CHECK CHAR(1) DEFAULT 'Y' CHECK (NOTIFICATION_CHECK IN ('Y', 'N')) ,
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
FOREIGN KEY (OTHER_USEREMAIL, OTHER_PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );
COMMENT ON TABLE TB_NOTIFICATION IS '알림';
COMMENT ON COLUMN TB_NOTIFICATION.NOTIFICATION_ID IS '알림 ID';
COMMENT ON COLUMN TB_NOTIFICATION.USEREMAIL IS '유저 이메일';
COMMENT ON COLUMN TB_NOTIFICATION.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_NOTIFICATION.OTHER_USEREMAIL IS '다른 유저 이메일';
COMMENT ON COLUMN TB_NOTIFICATION.OTHER_PROVIDER IS '다른 유저 제공자';
COMMENT ON COLUMN TB_NOTIFICATION.TYPE IS '분류(0: 공지알림, 1: 강의알림, 2: 대댓글알림, 3: QNA 답변알림)';
COMMENT ON COLUMN TB_NOTIFICATION.NOTIFICATION_CONTENT IS '알림 내용';
COMMENT ON COLUMN TB_NOTIFICATION.NOTIFICATION_DATE IS '알림 날짜';
COMMENT ON COLUMN TB_NOTIFICATION.NOTIFICATION_CHECK IS '알림 설정(받기(Y), 안받기(N))';

        -- QNA 질문
CREATE TABLE TB_QNA_QUESTION (
        QUESTION_ID NUMBER PRIMARY KEY,
        QUESTION_TITLE VARCHAR2(1000) NOT NULL,
QUESTION_CONTENT VARCHAR2(1000) NOT NULL,
ASKER_EMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
QUESTION_DATE DATE DEFAULT SYSDATE,
QUESTION_CHECK CHAR(1) DEFAULT 'N' CHECK (QUESTION_CHECK IN ('Y', 'N')) ,
FOREIGN KEY (ASKER_EMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );
COMMENT ON TABLE TB_QNA_QUESTION IS 'QNA 질문';
COMMENT ON COLUMN TB_QNA_QUESTION.QUESTION_ID IS '질문 ID';
COMMENT ON COLUMN TB_QNA_QUESTION.QUESTION_TITLE IS '질문 제목';
COMMENT ON COLUMN TB_QNA_QUESTION.QUESTION_CONTENT IS '질문 내용';
COMMENT ON COLUMN TB_QNA_QUESTION.ASKER_EMAIL IS '질문자 이메일';
COMMENT ON COLUMN TB_QNA_QUESTION.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_QNA_QUESTION.QUESTION_DATE IS '질문 날짜';
COMMENT ON COLUMN TB_QNA_QUESTION.QUESTION_CHECK IS '질문 확인(Y: 답변O, N: 답변X)';


        -- QNA 답변
CREATE TABLE TB_QNA_ANSWER (
        ANSWER_ID NUMBER PRIMARY KEY,
        QUESTION_ID NUMBER NOT NULL,
        ANSWER_CONTENT VARCHAR2(1000) NOT NULL,
ANSWERER_EMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
ANSWER_DATE DATE DEFAULT SYSDATE,
FOREIGN KEY (QUESTION_ID) REFERENCES TB_QNA_QUESTION(QUESTION_ID),
FOREIGN KEY (ANSWERER_EMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );
COMMENT ON TABLE TB_QNA_ANSWER IS 'QNA 답변';
COMMENT ON COLUMN TB_QNA_ANSWER.ANSWER_ID IS '답변 ID';
COMMENT ON COLUMN TB_QNA_ANSWER.QUESTION_ID IS '질문 ID';
COMMENT ON COLUMN TB_QNA_ANSWER.ANSWER_CONTENT IS '답변 내용';
COMMENT ON COLUMN TB_QNA_ANSWER.ANSWERER_EMAIL IS '답변자 이메일';
COMMENT ON COLUMN TB_QNA_ANSWER.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_QNA_ANSWER.ANSWER_DATE IS '답변 날짜';



        --허강--------------------------------------------------------------------------------------------------------------------------------
        -- 공지사항
CREATE TABLE TB_ANNOUNCEMENT (
        ANNOUNCEMENT_ID NUMBER PRIMARY KEY,
        TITLE VARCHAR2(255) NOT NULL,
CONTENT VARCHAR2(2000),
CREATED_AT TIMESTAMP DEFAULT SYSDATE NOT NULL,
CREATOR VARCHAR2(100),
CATEGORY NUMBER(1) NOT NULL,
IMPORTANCE NUMBER(1) DEFAULT 0 CHECK (IMPORTANCE IN (0,1)), -- 1이 중요 0은 안중요
FOREIGN KEY (CREATOR) REFERENCES TB_USERS(NICKNAME)

        );
COMMENT ON TABLE TB_ANNOUNCEMENT IS '공지사항';
COMMENT ON COLUMN TB_ANNOUNCEMENT.ANNOUNCEMENT_ID IS '공지사항 일련번호';
COMMENT ON COLUMN TB_ANNOUNCEMENT.TITLE IS '공지사항제목';
COMMENT ON COLUMN TB_ANNOUNCEMENT.CONTENT IS '공지사항내용';
COMMENT ON COLUMN TB_ANNOUNCEMENT.CREATED_AT IS '작성시간';
COMMENT ON COLUMN TB_ANNOUNCEMENT.CREATOR IS '작성자';
COMMENT ON COLUMN TB_ANNOUNCEMENT.CATEGORY IS '공지사항 종류(0:서비스 1:업데이트 2:이벤트)';
COMMENT ON COLUMN TB_ANNOUNCEMENT.IMPORTANCE IS '중요도';


        -- 채팅방
CREATE TABLE TB_CHATROOM (
        ROOM_ID NUMBER PRIMARY KEY,
        ROOM_NAME VARCHAR2(255),
ROOM_TYPE VARCHAR2(20) CHECK (ROOM_TYPE IN ('individual', 'group')),
CREATED_AT TIMESTAMP DEFAULT SYSDATE,
CREATOR VARCHAR2(50),
PIN NUMBER(1) DEFAULT 0 CHECK (PIN IN (0,1)),
CONSTRAINT FK_CREATED_BY FOREIGN KEY (CREATOR) REFERENCES TB_USERS(NICKNAME)
        );
COMMENT ON TABLE TB_CHATROOM IS '채팅방';
COMMENT ON COLUMN TB_CHATROOM.ROOM_ID IS '채팅방 일련번호';
COMMENT ON COLUMN TB_CHATROOM.ROOM_NAME IS '채팅방 제목';
COMMENT ON COLUMN TB_CHATROOM.ROOM_TYPE IS '채팅방 종류';
COMMENT ON COLUMN TB_CHATROOM.CREATED_AT IS '생성일';
COMMENT ON COLUMN TB_CHATROOM.CREATOR IS '채팅방 만든이';
COMMENT ON COLUMN TB_CHATROOM.PIN IS '핀여부(0:없음 1:있음)';


        -- 채팅유저
CREATE TABLE TB_CHATUSER (
        USER_ID VARCHAR2(50),
ROOM_ID NUMBER,
PRIMARY KEY (USER_ID, ROOM_ID),
CONSTRAINT FK_CHATUSER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(NICKNAME),
CONSTRAINT FK_CHATROOM_ID FOREIGN KEY (ROOM_ID) REFERENCES TB_CHATROOM(ROOM_ID)
        );
COMMENT ON TABLE TB_CHATUSER IS '채팅유저';
COMMENT ON COLUMN TB_CHATUSER.USER_ID IS '유저닉네임';
COMMENT ON COLUMN TB_CHATUSER.ROOM_ID IS '채팅방 일련번호';

        -- 채팅 메시지
CREATE TABLE TB_CHATMESSAGE (
        MESSAGE_ID NUMBER PRIMARY KEY,
        ROOM_ID NUMBER NOT NULL,
        SENDER_ID VARCHAR2(50) NOT NULL,
MESSAGE_CONTENT VARCHAR(2000),
MESSAGE_TYPE NUMBER(1) DEFAULT 0 CHECK (MESSAGE_TYPE IN (0, 1, 2, 3)), -- 0: 메시지 1: 사진 2: 동영상 3: 그 외 파일
DATE_SENT TIMESTAMP DEFAULT SYSDATE,
IS_ANNOUNCEMENT NUMBER(1) DEFAULT 0 CHECK (IS_ANNOUNCEMENT IN (0, 1)), -- 0:공지아님 1: 공지맞음
CONSTRAINT FK_MESSAGEROOM_ID FOREIGN KEY (ROOM_ID) REFERENCES TB_CHATROOM(ROOM_ID),
CONSTRAINT FK_MESSAGESENDER_ID FOREIGN KEY (SENDER_ID) REFERENCES TB_USERS(NICKNAME)
        );
COMMENT ON TABLE TB_CHATMESSAGE IS '채팅 메시지';
COMMENT ON COLUMN TB_CHATMESSAGE.MESSAGE_ID IS '메시지 일련번호';
COMMENT ON COLUMN TB_CHATMESSAGE.ROOM_ID IS '채팅방 일련번호';
COMMENT ON COLUMN TB_CHATMESSAGE.SENDER_ID IS '송신자';
COMMENT ON COLUMN TB_CHATMESSAGE.MESSAGE_CONTENT IS '메시지 내용';
COMMENT ON COLUMN TB_CHATMESSAGE.MESSAGE_TYPE IS '메시지 타입(0: 메시지 1: 사진 2: 동영상 3:그 외)';
COMMENT ON COLUMN TB_CHATMESSAGE.DATE_SENT IS '전송 시간';
COMMENT ON COLUMN TB_CHATMESSAGE.IS_ANNOUNCEMENT IS '공지사항 여부(0:아님(기본) 1:맞음)';

        -- 메시지 읽음확인
CREATE TABLE TB_MESSAGEREAD (
        MESSAGE_ID NUMBER NOT NULL,
        USER_ID VARCHAR2(50) NOT NULL,
READ_AT TIMESTAMP DEFAULT SYSDATE,
CONSTRAINT PK_MESSAGEREAD PRIMARY KEY (MESSAGE_ID, USER_ID),
CONSTRAINT FK_READMESSAGE_ID FOREIGN KEY (MESSAGE_ID) REFERENCES TB_CHATMESSAGE(MESSAGE_ID),
CONSTRAINT FK_READUSER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(NICKNAME)
        );
COMMENT ON TABLE TB_MESSAGEREAD IS '메시지 읽음확인';
COMMENT ON COLUMN TB_MESSAGEREAD.MESSAGE_ID IS '메시지 일련번호';
COMMENT ON COLUMN TB_MESSAGEREAD.USER_ID IS '읽은 유저';
COMMENT ON COLUMN TB_MESSAGEREAD.READ_AT IS '읽은 시간';

        -- 메시지 내부 파일
CREATE TABLE TB_MESSAGEFILE (
        FILE_ID NUMBER PRIMARY KEY,
        MESSAGE_ID NUMBER NOT NULL,
        FILE_URL VARCHAR2(500),
FILE_SIZE VARCHAR2(50),
ORIGINAL_NAME VARCHAR2(500),
RENAMED_NAME VARCHAR2(500),
CONSTRAINT FK_FILEMESSAGE_ID FOREIGN KEY (MESSAGE_ID) REFERENCES TB_CHATMESSAGE(MESSAGE_ID)
        );
COMMENT ON TABLE TB_MESSAGEFILE IS '메시지 파일';
COMMENT ON COLUMN TB_MESSAGEFILE.FILE_ID IS '파일 일련번호';
COMMENT ON COLUMN TB_MESSAGEFILE.MESSAGE_ID IS '메시지 일련번호';
COMMENT ON COLUMN TB_MESSAGEFILE.FILE_URL IS '파일 주소';
COMMENT ON COLUMN TB_MESSAGEFILE.FILE_SIZE IS '파일 사이즈';
COMMENT ON COLUMN TB_MESSAGEFILE.ORIGINAL_NAME IS '파일 원본명';
COMMENT ON COLUMN TB_MESSAGEFILE.RENAMED_NAME  IS '파일 변경명';

        --김도하-------------------------------------------------------------------
        -- 게시판: 게시물 테이블
CREATE TABLE TB_POST (
        POST_ID NUMBER PRIMARY KEY,
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
SUB_CATEGORY_ID NUMBER NOT NULL,
TITLE VARCHAR2(255) NOT NULL,
CONTENT VARCHAR2(4000) NOT NULL,
POST_TIME TIMESTAMP DEFAULT SYSDATE,
POST_VIEW_COUNT NUMBER DEFAULT 0,
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
FOREIGN KEY (SUB_CATEGORY_ID) REFERENCES TB_SUB_CATEGORY(SUB_CATEGORY_ID)
        );

        -- TB_POST 테이블
COMMENT ON TABLE TB_POST IS '게시물';
COMMENT ON COLUMN TB_POST.POST_ID IS '게시물의 고유 식별자';
COMMENT ON COLUMN TB_POST.USEREMAIL IS '게시물을 작성한 사용자의 이메일';
COMMENT ON COLUMN TB_POST.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_POST.SUB_CATEGORY_ID IS '게시물의 소속 하위 카테고리 식별자';
COMMENT ON COLUMN TB_POST.TITLE IS '게시물의 제목';
COMMENT ON COLUMN TB_POST.CONTENT IS '게시물의 내용';
COMMENT ON COLUMN TB_POST.POST_TIME IS '게시물이 생성된 시간';
COMMENT ON COLUMN TB_POST.VIEW_COUNT IS '게시물의 조회수';


        -- 게시판: 댓글 테이블
CREATE TABLE TB_COMMENT (
        COMMENT_ID NUMBER PRIMARY KEY,
        POST_ID NUMBER NOT NULL,
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
CONTENT VARCHAR2(1000) NOT NULL,
COMMENT_TIME TIMESTAMP DEFAULT SYSDATE,
FOREIGN KEY (POST_ID) REFERENCES TB_POST(POST_ID),
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );

        -- TB_COMMENT 테이블
COMMENT ON TABLE TB_COMMENT IS '게시물 댓글';
COMMENT ON COLUMN TB_COMMENT.COMMENT_ID IS '댓글의 고유 식별자';
COMMENT ON COLUMN TB_COMMENT.POST_ID IS '댓글이 속한 게시물의 ID';
COMMENT ON COLUMN TB_COMMENT.USEREMAIL IS '댓글을 작성한 사용자의 이메일';
COMMENT ON COLUMN TB_COMMENT.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_COMMENT.CONTENT IS '댓글의 내용';
COMMENT ON COLUMN TB_COMMENT.COMMENT_TIME IS '댓글이 작성된 시간';


        -- 게시판: 파일 테이블
CREATE TABLE TB_FILE (
        POST_FILE_ID NUMBER PRIMARY KEY,
        POST_ID NUMBER NOT NULL,
        POST_FILE_URL VARCHAR2(1000) NOT NULL,
FILE_UPLOAD_TIME TIMESTAMP DEFAULT SYSDATE,
FOREIGN KEY (POST_ID) REFERENCES TB_POST(POST_ID)
        );

        -- TB_FILE 테이블
COMMENT ON TABLE TB_FILE IS '게시물 파일';
COMMENT ON COLUMN TB_FILE.POST_FILE_ID IS '파일의 고유 식별자';
COMMENT ON COLUMN TB_FILE.POST_ID IS '파일이 첨부된 게시물의 ID';
COMMENT ON COLUMN TB_FILE.POST_FILE_URL IS '파일의 저장 경로(URL)';
COMMENT ON COLUMN TB_FILE.FILE_UPLOAD_TIME IS '파일이 업로드된 시간';



        -- 게시판: 좋아요 테이블
CREATE TABLE TB_LIKE (
        LIKE_ID NUMBER PRIMARY KEY,
        POST_ID NUMBER NOT NULL,
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
UNIQUE (POST_ID, USEREMAIL),
FOREIGN KEY (POST_ID) REFERENCES TB_POST(POST_ID),
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );

        -- TB_LIKE 테이블
COMMENT ON TABLE TB_LIKE IS '게시물 좋아요';
COMMENT ON COLUMN TB_LIKE.LIKE_ID IS '좋아요의 고유 식별자';
COMMENT ON COLUMN TB_LIKE.POST_ID IS '좋아요가 등록된 게시물의 ID';
COMMENT ON COLUMN TB_LIKE.USEREMAIL IS '좋아요를 클릭한 사용자의 이메일';
COMMENT ON COLUMN TB_LIKE.PROVIDER IS '제공자';


        -- 쿠폰 테이블
CREATE TABLE TB_COUPON (
        COUPON_ID NUMBER PRIMARY KEY,
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
COUPON_DESCRIPTION VARCHAR2(255),
DISCOUNT_AMOUNT NUMBER(10, 2) NOT NULL,
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER)
        );

        -- TB_COUPON 테이블
COMMENT ON TABLE TB_COUPON IS '쿠폰';
COMMENT ON COLUMN TB_COUPON.COUPON_ID IS '쿠폰의 고유 식별자';
COMMENT ON COLUMN TB_COUPON.USEREMAIL IS '쿠폰을 소유한 사용자의 이메일';
COMMENT ON COLUMN TB_COUPON.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_COUPON.COUPON_DESCRIPTION IS '쿠폰의 설명';
COMMENT ON COLUMN TB_COUPON.DISCOUNT_AMOUNT IS '쿠폰의 할인 금액';


        -- 거래 내역 테이블
CREATE TABLE TB_TRANSACTION_HISTORY (
        TRANSACTION_ID NUMBER PRIMARY KEY,
        USEREMAIL VARCHAR2(50) NOT NULL,
PROVIDER VARCHAR2(20) NOT NULL,
LECTURE_PACKAGE_ID NUMBER NOT NULL,
PAYMENT_TYPE CHAR(1) NOT NULL CHECK (PAYMENT_TYPE IN ('0', 					'1', '2')), -- '0': 토스, '1': 네이버페이, '2': 카카오페이
COUPON_ID NUMBER,
FINAL_PRICE NUMBER NOT NULL,
TRANSACTION_DATE TIMESTAMP DEFAULT SYSDATE,
SUBSCRIPTION_END_DATE TIMESTAMP,
LECTURE_PACKAGE_KIND_PRICE CHAR(1) NOT NULL CHECK (LECTURE_PACKAGE_KIND_PRICE IN ('0', '1')),
PAYMENT_CONFIRMATION CHAR(1) DEFAULT 'N' CHECK (PAYMENT_CONFIRMATION IN ('Y', 'N')),
UNIQUE (USEREMAIL, LECTURE_PACKAGE_ID),
FOREIGN KEY (USEREMAIL, PROVIDER) REFERENCES TB_USERS(USEREMAIL, PROVIDER),
FOREIGN KEY (LECTURE_PACKAGE_ID) REFERENCES TB_LECTURE_PACKAGE(LECTURE_PACKAGE_ID),

FOREIGN KEY (COUPON_ID) REFERENCES TB_COUPON(COUPON_ID)
        );

        -- TB_TRANSACTION_HISTORY 테이블
COMMENT ON TABLE TB_TRANSACTION_HISTORY IS '거래 내역';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.TRANSACTION_ID IS '거래의 고유 식별자';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.USEREMAIL IS '거래를 진행한 사용자의 이메일';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.PROVIDER IS '제공자';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.LECTURE_PACKAGE_ID IS '구매된 패키지의 ID';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.COUPON_ID IS '거래에 사용된 쿠폰의 ID';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.FINAL_PRICE IS '최종 결제 금액';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.TRANSACTION_DATE IS '거래 발생 일시';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.SUBSCRIPTION_END_DATE IS '구독 종료 일시';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.LECTURE_PACKAGE_KIND_PRICE IS '패키지의 가격 유형';
COMMENT ON COLUMN TB_TRANSACTION_HISTORY.PAYMENT_CONFIRMATION IS '결제 확인 상태';


        --이건우 ----------------------------------------------------------

CREATE TABLE TB_IT_NEWS_SITE (
        SITE_URL VARCHAR2(300) PRIMARY KEY,
LATEST_BOARD_URL VARCHAR2(300) NOT NULL,
SITE_NAME VARCHAR2(100) NOT NULL,
VIDEO_ELEMENT VARCHAR2(500),
TITLE_ELEMENT VARCHAR2(300),
CONTEXT_ELEMENT VARCHAR2(300)
);


COMMENT ON COLUMN TB_IT_NEWS_SITE.SITE_URL IS '정보를 가져올 사이트 URL';
COMMENT ON COLUMN TB_IT_NEWS_SITE.LATEST_BOARD_URL IS '최신 게시물로 들어갈 수 있는 링크';
COMMENT ON COLUMN TB_IT_NEWS_SITE.SITE_NAME IS '해당 사이트 이름';
COMMENT ON COLUMN TB_IT_NEWS_SITE.CONTEXT_ELEMENT IS '제목 정보를 얻기 위한 엘리먼트';
COMMENT ON COLUMN TB_IT_NEWS_SITE.VIDEO_ELEMENT IS '동영상 정보를 얻기 위한 엘리먼트';
COMMENT ON COLUMN TB_IT_NEWS_SITE.CONTEXT_ELEMENT IS '본문 정보를 얻기 위한 엘리먼트';



CREATE TABLE TB_IT_NEWS_BOARD (
        BOARD_ID INT PRIMARY KEY,
        SITE_URL VARCHAR2(300),
TITLE VARCHAR2(300) NOT NULL,
VIDEO_TEXTLIZED_CONTEXT VARCHAR2(3000),
ORIGINAL_CONTEXT VARCHAR2(3000),
REGIST_DATE DATE,
CONSTRAINT FK_SITE_URL FOREIGN KEY (SITE_URL) REFERENCES TB_IT_NEWS_SITE(SITE_URL)
        );


COMMENT ON COLUMN TB_IT_NEWS_BOARD.BOARD_ID IS '보드 넘버';
COMMENT ON COLUMN TB_IT_NEWS_BOARD.SITE_URL IS '해당 사이트 URL from IT_NEWS_SITE';
COMMENT ON COLUMN TB_IT_NEWS_BOARD.TITLE IS '해당 보드의 제목';
COMMENT ON COLUMN TB_IT_NEWS_BOARD.VIDEO_TEXTLIZED_CONTEXT IS '영상을 텍스트화 한 내용';
COMMENT ON COLUMN TB_IT_NEWS_BOARD.ORIGINAL_CONTEXT IS '원문(텍스트 원글) 내용';
COMMENT ON COLUMN TB_IT_NEWS_BOARD.REGIST_DATE IS '등록 시간';





        -- 시퀀스 생성 -------------------------------------------------------------------------------------------------------------------------------------
        -- 이경민
-- 강의 ID 시퀀스
CREATE SEQUENCE SQ_LECTURE_ID START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCACHE NOCYCLE;

-- 댓글 ID 시퀀스
CREATE SEQUENCE SQ_COMMENT_ID START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCACHE NOCYCLE;

-- 알림 ID 시퀀스
CREATE SEQUENCE SQ_NOTIFICATION_ID START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCACHE NOCYCLE;

-- QNA 질문 ID 시퀀스
CREATE SEQUENCE SQ_QNA_QUESTION_ID START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCACHE NOCYCLE;

-- QNA 답변 ID 시퀀스
CREATE SEQUENCE SQ_QNA_ANSWER_ID START WITH 1 INCREMENT BY 1 NOMAXVALUE NOCACHE NOCYCLE;


--김채림
--상위카테고리 ID시퀀스
CREATE SEQUENCE SQ_UPPER_CATEGORY_ID START WITH 1 INCREMENT BY 1;

        --하위카테고리 ID시퀀스
CREATE SEQUENCE SQ_SUB_CATEGORY_ID START WITH 1 INCREMENT BY 1;

        --기술스택 ID시퀀스
CREATE SEQUENCE SQ_TECH_STACK_ID START WITH 1 INCREMENT BY 1;

        --패키지 ID시퀀스
CREATE SEQUENCE SQ_LECTURE_PACKAGE_ID START WITH 1 INCREMENT BY 1;

        --수강추천대상 ID시퀀스
CREATE SEQUENCE SQ_RECOMMEND_PERSON_ID START WITH 1 INCREMENT BY 1;

        --강의패키지마다의 하위카테고리 ID시퀀스
CREATE SEQUENCE SQ_LECTURE_PACKAGE_SUB_CATEGORY_ID START WITH 1 INCREMENT BY 1;

        --자격증관리 ID시퀀스
CREATE SEQUENCE SQ_MY_CERTIFICATE_NUMBER START WITH 1 INCREMENT BY 1;

        --별점 ID시퀀스
CREATE SEQUENCE SQ_RATING_ID START WITH 1 INCREMENT BY 1;

        --강의 시청기록 ID시퀀스
CREATE SEQUENCE SQ_WATCH_ID START WITH 1 INCREMENT BY 1;


        --허강
-- 공지사항 ID 시퀀스
CREATE SEQUENCE SQ_ANNOUNCEMENT_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- 채팅방 ID 시퀀스
CREATE SEQUENCE SQ_ROOM_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- 채팅 메시지 ID 시퀀스
CREATE SEQUENCE SQ_MESSAGE_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- 채팅 파일 ID 시퀀스
CREATE SEQUENCE SQ_FILE_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- 김도하
-- 게시물 ID 시퀀스
CREATE SEQUENCE SQ_POST_ID START WITH 1 INCREMENT BY 1;
        -- 게시물 댓글 ID 시퀀스
CREATE SEQUENCE SQ_POST_COMMENT_ID START WITH 1 INCREMENT BY 1;
        -- 게시물 파일 ID 시퀀스
CREATE SEQUENCE SQ_POST_FILE_ID START WITH 1 INCREMENT BY 1;
        -- 게시물 좋아요 ID 시퀀스
CREATE SEQUENCE SQ_LIKE_ID START WITH 1 INCREMENT BY 1;
        -- 결제 쿠폰 ID 시퀀스
CREATE SEQUENCE SQ_COUPON_ID START WITH 1 INCREMENT BY 1;
        -- 거래 ID 시퀀스
CREATE SEQUENCE SQ_TRANSACTION_ID START WITH 1 INCREMENT BY 1;




        -- 트리거 생성 -------------------------------------------------------------------------------------------------------------------------------------
        -- 이경민
-- 강의 업로드 알림 트리거
CREATE OR REPLACE TRIGGER TR_LECTURE_UPLOAD_NOTIFICATION
AFTER INSERT ON TB_LECTURE
FOR EACH ROW
        BEGIN
INSERT INTO TB_NOTIFICATION (
        NOTIFICATION_ID, USEREMAIL, PROVIDER, OTHER_USEREMAIL, OTHER_PROVIDER, TYPE, NOTIFICATION_CONTENT, NOTIFICATION_DATE, NOTIFICATION_CHECK
        )
VALUES (SQ_NOTIFICATION_ID.NEXTVAL, :new.USEREMAIL, NULL, NULL, NULL, 1, '새로운 강의가 업로드 되었어요~!: ', SYSDATE, 'Y');
END;
/

        -- 강의 대댓글 알림 트리거
CREATE OR REPLACE TRIGGER TR_LECTURE_COMMENT_NOTIFICATION
AFTER INSERT ON TB_LECTURE_COMMENT
FOR EACH ROW
        DECLARE
parent_comment_author VARCHAR2(50);
BEGIN
    -- 부모 댓글의 작성자 이메일을 가져옴
SELECT USEREMAIL INTO parent_comment_author
FROM TB_LECTURE_COMMENT
WHERE LECTURE_COMMENT_ID = :new.PARENT_COMMENT_ID;

    -- 부모 댓글의 작성자와 현재 사용자가 다르고 대댓글이면 알림 생성
IF parent_comment_author <> :new.USEREMAIL THEN
INSERT INTO TB_NOTIFICATION (NOTIFICATION_ID, USEREMAIL, PROVIDER, OTHER_USEREMAIL, OTHER_PROVIDER, TYPE, NOTIFICATION_CONTENT, NOTIFICATION_DATE, NOTIFICATION_CHECK)
VALUES (SQ_NOTIFICATION_ID.NEXTVAL, parent_comment_author, 'CommentProvider', :new.USEREMAIL, 'CommentProvider', 2, '댓글에 코멘트가 달렸어요.', SYSDATE, 'Y');
END IF;
END;
/

        -- QNA 질문에 대한 답변 트리거
CREATE OR REPLACE TRIGGER TR_QNA_ANSWER_NOTIFICATION
AFTER INSERT ON TB_QNA_ANSWER
FOR EACH ROW
        BEGIN
INSERT INTO TB_NOTIFICATION (NOTIFICATION_ID, USEREMAIL, PROVIDER, OTHER_USEREMAIL, OTHER_PROVIDER, TYPE, NOTIFICATION_CONTENT, NOTIFICATION_DATE, NOTIFICATION_CHECK)
VALUES (SQ_NOTIFICATION_ID.NEXTVAL, :new.ANSWERER_EMAIL, 'QnAProvider', NULL, '관리자', 3, '질문에 대한 답변이 등록되었습니다.', SYSDATE, 'Y');
END;
/

        -- QNA 답변 등록되면 질문 체크 'Y' 변환 트리거
CREATE OR REPLACE TRIGGER TR_QNA_QUESTION_ANSWERED
AFTER INSERT ON TB_QNA_ANSWER
FOR EACH ROW
        BEGIN
UPDATE TB_QNA_QUESTION
SET QUESTION_CHECK = 'Y'
WHERE QUESTION_ID = :new.QUESTION_ID;
END;
/

        -- 김도하
-- 트랜잭션의 구독 종료 날짜 자동 설정
CREATE OR REPLACE TRIGGER TR_SET_SUBSCRIPTION_END_DATE
BEFORE INSERT ON TB_TRANSACTION_HISTORY
FOR EACH ROW
        BEGIN
IF :NEW.LECTURE_PACKAGE_kind_price = '0' THEN
        :NEW.subscription_end_date := :NEW.transaction_date + INTERVAL '30' DAY;
ELSIF :NEW.LECTURE_PACKAGE_kind_price = '1' THEN
        :NEW.subscription_end_date := NULL;
END IF;
END;
/

        -- 스케줄러 생성-------------------------------------------------------------------------------
        -- 김도하
-- 월정액 만료 기간 < sysdate 시 데이터 삭제
BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'DELETE_EXPIRED_SUBSCRIPTIONS',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN
                DELETE FROM tb_transaction_history
                WHERE LECTURE_PACKAGE_KIND_PRICE = ''0''
                AND subscription_end_date < SYSDATE;
COMMIT;
END;',
start_date      => SYSTIMESTAMP,
repeat_interval => 'FREQ=DAILY; BYHOUR=0; BYMINUTE=0; BYSECOND=0',
end_date        => NULL,
enabled         => TRUE,
comments        => 'Deletes expired monthly subscriptions daily at midnight.'
        );
END;
/

        -- 뷰 생성 -------------------------------------------------------------------------------------------------------------------------
        -- 이경민
-- 각 강의 마다의 댓글 뷰
CREATE VIEW LECTURE_COMMENT_VIEW AS
SELECT l.LECTURE_ID, l.LECTURE_NAME, c.LECTURE_COMMENT_ID, c.LECTURE_COMMENT_CONTENT, c.USEREMAIL
FROM TB_LECTURE l
JOIN TB_LECTURE_COMMENT c ON l.LECTURE_ID = c.LECTURE_ID;


-- 예전 테이블, 시퀀스 삭제용(오류나도 무시해도됨) --------------------------------------------------------------------------------------------------
DROP TABLE TB_LOGIN_OK CASCADE CONSTRAINTS;
DROP TABLE TB_INTEREST CASCADE CONSTRAINTS;
DROP TABLE TB_INTERESTS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_INTERESTS CASCADE CONSTRAINTS;
DROP TABLE TB_ARCHIVED_REASON CASCADE CONSTRAINTS;
DROP TABLE TB_SOCIAL_LOGIN CASCADE CONSTRAINTS;
DROP TABLE TB_SOCIAL_LOGIN_USER CASCADE CONSTRAINTS;

DROP SEQUENCE SEQ_ARCHIVED_REASON_ID;
DROP SEQUENCE SQ_ARCHIVED_REASON_ID;
DROP SEQUENCE SQ_SOCIAL_LOGIN_ID;
DROP SEQUENCE SEQ_SOCIAL_LOGIN_ID;
DROP SEQUENCE SEQ_ATTENDANCE_ID;
DROP SEQUENCE SQ_ATTENDANCE_ID;
DROP SEQUENCE SEQ_EDUCATION_ID;
DROP SEQUENCE SQ_EDUCATION_ID;

COMMIT;


DROP TABLE TB_RECOMMEND_PERSON CASCADE CONSTRAINTS;
DROP TABLE TB_PACKAGE CASCADE CONSTRAINTS;
